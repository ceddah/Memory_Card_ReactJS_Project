{"version":3,"sources":["components/useFetchPokemons.js","images/logo.png","components/ScoreBoard.js","components/Card.js","components/GameBoard.js","components/App.js","index.js"],"names":["useFetchPokemons","React","useState","pokemons","setPokemons","useEffect","tempData","fetchData","id","a","fetch","resp","json","pokeData","push","correctData","map","poke","name","img","sprites","front_default","length","i","ScoreBoard","score","topscore","className","src","Logo","alt","Card","handleClick","onClick","GameBoard","setScore","gameOver","setGameOver","clickedCards","setClickedCards","currentDeck","setCurrentDeck","loading","setLoading","data","undefined","selectRandomCards","randomIndex","Math","floor","random","cards","idxArray","currentidx","includes","forEach","idx","setTimeout","checkIsGameOver","c","areAllCardsInvalid","every","card","currScore","color","App","setTopscore","savedTopscore","JSON","parse","localStorage","getItem","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.097cace1.chunk.js","sourcesContent":["import React from 'react'\n\nconst useFetchPokemons = () => {\n    const [pokemons, setPokemons] = React.useState([]);\n    const endpoint = 'https://pokeapi.co/api/v2/pokemon/';\n\n    React.useEffect(() => {\n        const tempData = [];\n        const fetchData = async (id) => {\n            const resp = await fetch(endpoint + id);\n            const pokeData = await resp.json();\n            tempData.push(pokeData);\n            const correctData = tempData.map(poke => {\n                const {name,id,sprites: { front_default }} = poke;\n                return { name, id, img: front_default };\n            })\n            if(correctData.length > 99) {\n                setPokemons(correctData);\n            }\n        }\n\n        for(let i = 1; i <= 100; i++) {\n            fetchData(i);\n        }\n    }, [])\n\n    return {pokemons}\n}\n\nexport default useFetchPokemons\n","export default __webpack_public_path__ + \"static/media/logo.e60fb1cd.png\";","import React from 'react'\nimport Logo from '../images/logo.png';\n\nconst ScoreBoard = ({score,topscore}) => {\n    return (\n        <div className=\"scoreboard\">\n            <div className=\"scoreboard__banner\">\n                <img src={Logo} alt=\"game-logo\"/>\n                <h1>Poke-Zone</h1>\n            </div>\n            <div className=\"scoreboard__scores\">\n                <h4 className=\"top-score\"><span>Top Score:</span> {topscore}</h4>\n                <h2 className=\"current-score\">Current Score: {score} / 100</h2>\n            </div>\n        </div>\n    )\n}\n\nexport default ScoreBoard\n","import React from 'react'\n\nconst Card = ({img,name,id,handleClick}) => {\n    return (\n        <div className=\"card\" onClick={() => handleClick(id)}>\n            <div className=\"image\">\n                <img src={img} alt=\"poke-card\" />\n            </div>\n            <h2 className=\"poke-name\">{name}</h2>\n        </div>\n    )\n}\n\nexport default Card\n","import React, {useState,useEffect} from 'react'\nimport Card from './Card';\nimport { Ring } from 'react-spinners-css';\n\nconst GameBoard = ({pokemons,setScore,score}) => {\n    const [gameOver, setGameOver] = useState(false);\n    const [clickedCards, setClickedCards] = useState([]);\n    const [currentDeck, setCurrentDeck] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const data = pokemons;\n\n    useEffect(() => {\n        if(data[0] !== undefined) {\n            selectRandomCards();\n        }\n    }, [data])\n\n    const randomIndex = () => Math.floor(Math.random() * data.length);\n    const selectRandomCards = () => {\n        const cards = [];\n        const idxArray = [];\n        let currentidx = randomIndex();\n        while (idxArray.length < 5) {\n            if(idxArray.includes(currentidx)) {\n                currentidx = randomIndex();\n            } else {\n                idxArray.push(currentidx);\n            }\n        }\n        idxArray.forEach(idx => cards.push(data[idx]));\n        setCurrentDeck(cards);\n    }\n\n    const renderCards = () => {\n        return currentDeck.map(card => <Card key={card.id} handleClick={handleClick} {...card} />)\n    }\n\n    const handleClick = (id) => {\n        setLoading(true);\n        setTimeout(() => setLoading(false), 500);\n        checkIsGameOver(id);\n        setClickedCards(c => [...c, id]);\n        selectRandomCards();\n        const areAllCardsInvalid = currentDeck.every(card => clickedCards.includes(card));\n        while(areAllCardsInvalid) {\n            selectRandomCards(); \n        }\n    }\n\n    const checkIsGameOver = (id) => {\n        if(clickedCards.includes(id)) {\n            setGameOver(true);\n        } else {\n            setScore(currScore => currScore + 1);\n        }\n    }\n\n    const resetGame = () => {\n        setClickedCards([]);\n        setGameOver(false);\n        setScore(0);\n        selectRandomCards();\n    }\n\n    return (\n        <div className=\"game-board\">\n            {!gameOver && <div className=\"cards\">\n                {loading ? <Ring color=\"#f4f4f4\" /> : renderCards()}\n            </div>}\n            {gameOver && <div className=\"gameOver-screen\">\n                <h1>Game is Over!</h1>\n                <h4>Your final score is: {score}</h4>\n                <button onClick={resetGame}>Play Again</button>\n            </div>}\n        </div>\n    )\n}\n\nexport default GameBoard\n","import React, {useState,useEffect} from 'react'\nimport './styles/App.scss'\nimport useFetchPokemons from './useFetchPokemons'\nimport ScoreBoard from './ScoreBoard';\nimport GameBoard from './GameBoard';\nconst App = () => {\n    const {pokemons} = useFetchPokemons();\n    const [score,setScore] = useState(0);\n    const [topscore,setTopscore] = useState(0)\n\n    if(score > topscore) {\n        setTopscore(score);\n    }\n\n    useEffect(() => {\n        const savedTopscore = JSON.parse(localStorage.getItem('TopScore'));\n        if(savedTopscore) {\n            setTopscore(savedTopscore);\n        }\n        localStorage.setItem('TopScore', JSON.stringify(topscore));\n    },[topscore])\n\n    return (\n        <div className=\"App\">\n            <ScoreBoard score={score} topscore={topscore} />\n            <GameBoard pokemons={pokemons} setScore={setScore} setTopscore={setTopscore} score={score} />\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}